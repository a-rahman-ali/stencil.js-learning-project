/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AdminDashboard {
    }
    interface AdminLogin {
    }
    interface CartComponent {
    }
    interface HeaderComponent {
    }
    interface HomeComponent {
    }
    interface LoadingSpinner {
    }
    interface LoginComponent {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface NavBar {
    }
    interface NotFound {
    }
    interface RouterComponent {
    }
    interface SignupComponent {
    }
}
export interface CartComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCartComponentElement;
}
export interface HeaderComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHeaderComponentElement;
}
export interface HomeComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHomeComponentElement;
}
declare global {
    interface HTMLAdminDashboardElement extends Components.AdminDashboard, HTMLStencilElement {
    }
    var HTMLAdminDashboardElement: {
        prototype: HTMLAdminDashboardElement;
        new (): HTMLAdminDashboardElement;
    };
    interface HTMLAdminLoginElement extends Components.AdminLogin, HTMLStencilElement {
    }
    var HTMLAdminLoginElement: {
        prototype: HTMLAdminLoginElement;
        new (): HTMLAdminLoginElement;
    };
    interface HTMLCartComponentElementEventMap {
        "cartItemCountUpdated": number;
    }
    interface HTMLCartComponentElement extends Components.CartComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCartComponentElementEventMap>(type: K, listener: (this: HTMLCartComponentElement, ev: CartComponentCustomEvent<HTMLCartComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCartComponentElementEventMap>(type: K, listener: (this: HTMLCartComponentElement, ev: CartComponentCustomEvent<HTMLCartComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCartComponentElement: {
        prototype: HTMLCartComponentElement;
        new (): HTMLCartComponentElement;
    };
    interface HTMLHeaderComponentElementEventMap {
        "searchEvent": string;
    }
    interface HTMLHeaderComponentElement extends Components.HeaderComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLHeaderComponentElementEventMap>(type: K, listener: (this: HTMLHeaderComponentElement, ev: HeaderComponentCustomEvent<HTMLHeaderComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLHeaderComponentElementEventMap>(type: K, listener: (this: HTMLHeaderComponentElement, ev: HeaderComponentCustomEvent<HTMLHeaderComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLHeaderComponentElement: {
        prototype: HTMLHeaderComponentElement;
        new (): HTMLHeaderComponentElement;
    };
    interface HTMLHomeComponentElementEventMap {
        "cartItemCountUpdated": number;
    }
    interface HTMLHomeComponentElement extends Components.HomeComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLHomeComponentElementEventMap>(type: K, listener: (this: HTMLHomeComponentElement, ev: HomeComponentCustomEvent<HTMLHomeComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLHomeComponentElementEventMap>(type: K, listener: (this: HTMLHomeComponentElement, ev: HomeComponentCustomEvent<HTMLHomeComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLHomeComponentElement: {
        prototype: HTMLHomeComponentElement;
        new (): HTMLHomeComponentElement;
    };
    interface HTMLLoadingSpinnerElement extends Components.LoadingSpinner, HTMLStencilElement {
    }
    var HTMLLoadingSpinnerElement: {
        prototype: HTMLLoadingSpinnerElement;
        new (): HTMLLoadingSpinnerElement;
    };
    interface HTMLLoginComponentElement extends Components.LoginComponent, HTMLStencilElement {
    }
    var HTMLLoginComponentElement: {
        prototype: HTMLLoginComponentElement;
        new (): HTMLLoginComponentElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLNavBarElement extends Components.NavBar, HTMLStencilElement {
    }
    var HTMLNavBarElement: {
        prototype: HTMLNavBarElement;
        new (): HTMLNavBarElement;
    };
    interface HTMLNotFoundElement extends Components.NotFound, HTMLStencilElement {
    }
    var HTMLNotFoundElement: {
        prototype: HTMLNotFoundElement;
        new (): HTMLNotFoundElement;
    };
    interface HTMLRouterComponentElement extends Components.RouterComponent, HTMLStencilElement {
    }
    var HTMLRouterComponentElement: {
        prototype: HTMLRouterComponentElement;
        new (): HTMLRouterComponentElement;
    };
    interface HTMLSignupComponentElement extends Components.SignupComponent, HTMLStencilElement {
    }
    var HTMLSignupComponentElement: {
        prototype: HTMLSignupComponentElement;
        new (): HTMLSignupComponentElement;
    };
    interface HTMLElementTagNameMap {
        "admin-dashboard": HTMLAdminDashboardElement;
        "admin-login": HTMLAdminLoginElement;
        "cart-component": HTMLCartComponentElement;
        "header-component": HTMLHeaderComponentElement;
        "home-component": HTMLHomeComponentElement;
        "loading-spinner": HTMLLoadingSpinnerElement;
        "login-component": HTMLLoginComponentElement;
        "my-component": HTMLMyComponentElement;
        "nav-bar": HTMLNavBarElement;
        "not-found": HTMLNotFoundElement;
        "router-component": HTMLRouterComponentElement;
        "signup-component": HTMLSignupComponentElement;
    }
}
declare namespace LocalJSX {
    interface AdminDashboard {
    }
    interface AdminLogin {
    }
    interface CartComponent {
        "onCartItemCountUpdated"?: (event: CartComponentCustomEvent<number>) => void;
    }
    interface HeaderComponent {
        "onSearchEvent"?: (event: HeaderComponentCustomEvent<string>) => void;
    }
    interface HomeComponent {
        "onCartItemCountUpdated"?: (event: HomeComponentCustomEvent<number>) => void;
    }
    interface LoadingSpinner {
    }
    interface LoginComponent {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface NavBar {
    }
    interface NotFound {
    }
    interface RouterComponent {
    }
    interface SignupComponent {
    }
    interface IntrinsicElements {
        "admin-dashboard": AdminDashboard;
        "admin-login": AdminLogin;
        "cart-component": CartComponent;
        "header-component": HeaderComponent;
        "home-component": HomeComponent;
        "loading-spinner": LoadingSpinner;
        "login-component": LoginComponent;
        "my-component": MyComponent;
        "nav-bar": NavBar;
        "not-found": NotFound;
        "router-component": RouterComponent;
        "signup-component": SignupComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "admin-dashboard": LocalJSX.AdminDashboard & JSXBase.HTMLAttributes<HTMLAdminDashboardElement>;
            "admin-login": LocalJSX.AdminLogin & JSXBase.HTMLAttributes<HTMLAdminLoginElement>;
            "cart-component": LocalJSX.CartComponent & JSXBase.HTMLAttributes<HTMLCartComponentElement>;
            "header-component": LocalJSX.HeaderComponent & JSXBase.HTMLAttributes<HTMLHeaderComponentElement>;
            "home-component": LocalJSX.HomeComponent & JSXBase.HTMLAttributes<HTMLHomeComponentElement>;
            "loading-spinner": LocalJSX.LoadingSpinner & JSXBase.HTMLAttributes<HTMLLoadingSpinnerElement>;
            "login-component": LocalJSX.LoginComponent & JSXBase.HTMLAttributes<HTMLLoginComponentElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "nav-bar": LocalJSX.NavBar & JSXBase.HTMLAttributes<HTMLNavBarElement>;
            "not-found": LocalJSX.NotFound & JSXBase.HTMLAttributes<HTMLNotFoundElement>;
            "router-component": LocalJSX.RouterComponent & JSXBase.HTMLAttributes<HTMLRouterComponentElement>;
            "signup-component": LocalJSX.SignupComponent & JSXBase.HTMLAttributes<HTMLSignupComponentElement>;
        }
    }
}
